<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorButton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.hidesidebar exit

var xo = 0
var dx = 55
var w = 44

var yo = 0
var dy = 55
var h = 44

for (i = 0; i &lt; 100; i += 1) {
    var xx,yy,spr,obj,off,killer
    /*
        xx - x coordinate of the button location
        yy - y coordinate of the button location
        spr - sprite to draw
        obj - object to select if clicked
        off - offset to draw sprite at if origin is not centered
        killer - whether or not to draw the object with the killer tint.
    */
    switch i {
        case 0:  xx=0 yy=0 spr=sSpikeUp obj=oSpikeUp off=16 killer=true break
        case 1:  xx=1 yy=0 spr=sSpikeDown obj=oSpikeDown off=16 killer=true break
        case 2:  xx=2 yy=0 spr=sSpikeLeft obj=oSpikeLeft off=16 killer=true break
        case 3:  xx=3 yy=0 spr=sSpikeRight obj=oSpikeRight off=16 killer=true break
        
        case 4:  xx=0 yy=1 spr=sMiniSpikeUp obj=oMiniSpikeUp off=8 killer=true break
        case 5:  xx=1 yy=1 spr=sMiniSpikeDown obj=oMiniSpikeDown off=8 killer=true break
        case 6:  xx=2 yy=1 spr=sMiniSpikeLeft obj=oMiniSpikeLeft off=8 killer=true break
        case 7:  xx=3 yy=1 spr=sMiniSpikeRight obj=oMiniSpikeRight off=8 killer=true break
        
        case 9:  xx=0 yy=2 spr=sEditBlock obj=oEditBlock off = 16 killer=false break
        case 10: xx=1 yy=2 spr=sEditMiniBlock obj=oEditMiniBlock off=8 killer=false break
        case 18: xx=2 yy=2 spr=sApple obj=oApple off = 0 killer=true break
        case 19: xx=3 yy=2 spr=sKillerBlock obj=oKillerBlock off=16 killer=true break
         
        case 12: xx=0 yy=3 spr=sPlatform obj=oPlatform off=16 killer=false break
        case 13: xx=1 yy=3 spr=sSave obj=oSave off=16 killer=false break
        case 16: xx=2 yy=3 spr=sWalljumpR obj=oWalljumpR off = 16 killer=false break
        case 17: xx=3 yy=3 spr=sWalljumpL obj=oWalljumpL off = 16 killer=false break
        
        case 14: xx=0 yy=4 spr=sWater1 obj=oWater off=16 killer=false break
        case 15: xx=1 yy=4 spr=sWater2 obj=oWater2 off=16 killer=false break
        case 24: xx=2 yy=4 spr=sWater3 obj=oWater3 off=16 killre=false break
        case 20: xx=3 yy=4 spr=sBulletBlocker obj=oBulletBlocker off=16 killer=false break
        
        case 23: xx=0 yy=5 spr=sJumpRefresher obj=oJumpRefresher off=0 killer=false break 
        case 22: xx=1 yy=5 spr=sWarp obj=oWarp off=16 killer=false break 
        case 21: xx=2 yy=5 spr=sPlayerStart obj=oPlayerStart off=16 killer=false break
        default: continue
    }
    
    var xxx = x+xo+xx*dx
    var yyy = y+yo+yy*dy
    var mouse_hover = point_in_rect(mouse_x,mouse_y,xxx,yyy,xxx+w,yyy+h)
    
    // draw button
    var button_active = mouse_hover and global.state == globalstate_idle
    var spike = obj == oSpikeUp or obj == oSpikeRight or obj == oSpikeLeft or obj == oSpikeDown
    var minispike = obj == oMiniSpikeUp or obj == oMiniSpikeRight or obj == oMiniSpikeLeft or obj == oMiniSpikeDown
    drawButton(xxx,yyy,w,h,false)
    fontSetup(font_small,c_black,fa_left,fa_top,1)
    var color = c_white
    if killer color = global.color_killer
    var frame = 0
    if spike frame = floor((global.count mod (global.spikeframes/global.spikeanimspeed))*global.spikeanimspeed)
    if minispike frame = floor((global.count mod (global.minispikeframes/global.minispikeanimspeed))*global.minispikeanimspeed)
    draw_sprite_ext(spr,frame,xxx+w/2-off,yyy+h/2-off,1,1,0,color,1)
    if button_active {
        draw_set_alpha(global.buttonhoveralpha)
        draw_set_color(global.color_buttonhover)
        draw_rectangle(xxx+1,yyy+1,xxx+w-2,yyy+h-2,false)
        if global.buttonhoverborder {
            draw_set_alpha(0.3)
            draw_set_color(c_black)
            draw_rectangle(xxx-1,yyy-1,xxx+w,yyy+h,true)
        }
    }
    
    // pressing button
    if mouse_hover
    and mouse_check_button_pressed(mb_left)
    and global.state == globalstate_idle {
        oEdit.selected_object = obj
        oEdit.selected_sprite = spr
        oEdit.selected_killer = killer
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
