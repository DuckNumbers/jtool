<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEditorPalette</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-120</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>combobox_selected = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.hidesidebar exit

if combobox_selected and global.state != globalstate_idle {
    combobox_selected = false
    global.comboboxselected = false
}

var xo = 0
var w = 50
dx = w+8

var yo = 0
var h = 50
dy = h+8
var tooltip_to_draw = ''

for (i = 0; i &lt; 100; i += 1) {
    if i &gt;= ds_list_size(global.palatteList) break
    
    var palItemMap = global.palatteList[| i]
    var spriteConfigMap = global.skinSpriteMap[? palItemMap[? 'spr']]
    
    var xx = i mod 4
    var yy = floor(i/4)
    var spr = spriteConfigMap[? 'sprite']
    var obj = global.stringToObjectMap[? palItemMap[? 'obj']]
    var xoff = spriteConfigMap[? 'xpaloff']
    var yoff = spriteConfigMap[? 'ypaloff']
    var tooltip = palItemMap[? 'tooltip']
    var animspeed = spriteConfigMap[? 'animspeed']
    var killer = obj == oKiller // todo: just test for obj == objKiller everywhere later?
    if i == 19 {
        spr = sEllipsis
        xoff = 0
        yoff = 0
    }
    
    var in_combobox = yy == 5 or yy == 6
    if in_combobox and not combobox_selected continue
    
    // draw button backing and sprite
    var xxx = x+xo+xx*dx
    var yyy = y+yo+yy*dy
    drawButton(xxx,yyy,w,h,false)
    
    var color = c_white
    if killer color = global.color_killer
    
    var frame = global.count * animspeed
    
    draw_sprite_ext(spr,frame,xxx+w/2-xoff,yyy+h/2-yoff,1,1,0,color,1)
    
    // draw highlight and set tooltip
    var button_highlighted = point_in_rect(mouse_x,mouse_y,xxx,yyy,xxx+w,yyy+h)
        and (not global.comboboxselected or in_combobox)
        and global.state == globalstate_idle
    
    if button_highlighted {
        draw_set_alpha(global.buttonhoveralpha)
        draw_set_color(global.color_buttonhover)
        draw_rectangle(xxx+1,yyy+1,xxx+w-2,yyy+h-2,false)
        if global.buttonhoverborder {
            draw_set_alpha(0.3)
            draw_set_color(c_black)
            draw_rectangle(xxx-1,yyy-1,xxx+w,yyy+h,true)
        }
        if tooltip != '' {
            tooltip_to_draw = tooltip
        }
    }
    
    // pressing button
    var is_comboboxtoggle = xx == 3 and yy == 4
    if button_highlighted and mouse_check_button_pressed(mb_left) {
        if not is_comboboxtoggle {
            oEdit.selected_object = obj
            oEdit.selected_sprite = spr
            oEdit.selected_killer = killer
            oEdit.selected_animspeed = animspeed
            if in_combobox {
                combobox_selected = false
                global.comboboxselected = false
            }
        }
        else {
            combobox_selected = not combobox_selected
            global.comboboxselected = combobox_selected
        }
        var flash = instance_create(xxx,yyy,oPaletteButtonFlash);
        flash.w = w
        flash.h = h
    }
    
    // draw combo box back and detect mouse leave
    if is_comboboxtoggle and combobox_selected {
        var combo_x = x+xo-8
        var combo_y = y+yo+5*dy-9
        var combo_w = dx*4+8
        var combo_h = dy*2+9
        
        drawButton(combo_x,combo_y,combo_w,combo_h,false)
        drawButton(xxx,yyy,w,combo_y-yyy+1,false)
        draw_set_color(global.color_button)
        draw_line(xxx,combo_y,xxx+w-2,combo_y)
        
        if not point_in_rect(mouse_x,mouse_y,combo_x,yyy,combo_x+combo_w,combo_y+combo_h) {
            combobox_selected = false
            global.comboboxselected = false
        }
    }
}

if tooltip_to_draw != '' {
    draw_set_font(font_small)
    var w = string_width(tooltip_to_draw)+10
    var xx = min(mouse_x, room_width-5-w)
    menuButton(xx, mouse_y+20, w, 25, tooltip_to_draw, false, false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
